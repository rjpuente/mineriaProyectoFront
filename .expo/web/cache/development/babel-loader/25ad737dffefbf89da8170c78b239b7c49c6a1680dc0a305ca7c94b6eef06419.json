{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Webcam from \"react-webcam\";\nimport { View, Button, Picker } from \"react-dom\";\nimport io from \"socket.io-client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar CameraConnectScreen = function CameraConnectScreen() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    connected = _useState2[0],\n    setConnected = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    devices = _useState4[0],\n    setDevices = _useState4[1];\n  var _useState5 = useState(\"\"),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedDevice = _useState6[0],\n    setSelectedDevice = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    socket = _useState8[0],\n    setSocket = _useState8[1];\n  var webcamRef = useRef(null);\n  useEffect(function () {\n    navigator.mediaDevices.enumerateDevices().then(function (devices) {\n      var cameras = devices.filter(function (device) {\n        return device.kind === \"videoinput\";\n      });\n      setDevices(cameras);\n    });\n  }, []);\n  var handleConnect = function handleConnect() {\n    setConnected(true);\n    var newSocket = io(\"http://localhost:5000\");\n    setSocket(newSocket);\n  };\n  useEffect(function () {\n    if (socket) {\n      socket.on(\"connected\", function (data) {\n        console.log(\"Connected to server:\", data);\n        handleSendImage();\n      });\n      socket.on(\"prediction\", function (prediction) {\n        console.log(\"Prediction received:\", prediction);\n      });\n      socket.on(\"error\", function (error) {\n        console.error(\"Error received:\", error);\n      });\n    }\n  }, [socket]);\n  var handleSendImage = function handleSendImage() {\n    console.log(\"Sending image...\");\n    if (socket && selectedDevice && webcamRef.current) {\n      var imageSrc = webcamRef.current.getScreenshot();\n      console.log(\"Image source:\", imageSrc);\n      fetch(imageSrc).then(function (res) {\n        return res.blob();\n      }).then(function (blob) {\n        var imageFile = new File([blob], \"image.png\", {\n          type: \"image/png\"\n        });\n        console.log(\"Image file:\", imageFile);\n        socket.emit(\"image\", {\n          image: imageFile\n        });\n      });\n    }\n  };\n  return _jsx(View, {\n    children: !connected ? _jsxs(View, {\n      children: [_jsxs(Picker, {\n        selectedValue: selectedDevice,\n        onValueChange: function onValueChange(value) {\n          return setSelectedDevice(value);\n        },\n        children: [_jsx(Picker.Item, {\n          label: \"Seleccionar c\\xE1mara\",\n          value: \"\"\n        }), devices.map(function (device) {\n          return _jsx(Picker.Item, {\n            label: device.label || \"C\\xE1mara \" + device.deviceId,\n            value: device.deviceId\n          }, device.deviceId);\n        })]\n      }), _jsx(Button, {\n        title: \"Conectar a la c\\xE1mara\",\n        onPress: handleConnect,\n        disabled: !selectedDevice\n      })]\n    }) : _jsx(View, {\n      children: _jsx(Webcam, {\n        audio: false,\n        videoConstraints: {\n          deviceId: selectedDevice\n        },\n        ref: webcamRef\n      })\n    })\n  });\n};\nexport default CameraConnectScreen;","map":{"version":3,"names":["React","useState","useEffect","useRef","Webcam","View","Button","Picker","io","jsx","_jsx","jsxs","_jsxs","CameraConnectScreen","_useState","_useState2","_slicedToArray","connected","setConnected","_useState3","_useState4","devices","setDevices","_useState5","_useState6","selectedDevice","setSelectedDevice","_useState7","_useState8","socket","setSocket","webcamRef","navigator","mediaDevices","enumerateDevices","then","cameras","filter","device","kind","handleConnect","newSocket","on","data","console","log","handleSendImage","prediction","error","current","imageSrc","getScreenshot","fetch","res","blob","imageFile","File","type","emit","image","children","selectedValue","onValueChange","value","Item","label","map","deviceId","title","onPress","disabled","audio","videoConstraints","ref"],"sources":["C:/Users/Deth1/Desarrollo/mineriaProyectoFront/src/Screens/CameraConnectScreen.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport { View, Button, Picker } from \"react-dom\"; // Importa desde \"react-dom\" en lugar de \"react-native\"\r\nimport io from \"socket.io-client\";\r\n\r\nconst CameraConnectScreen = () => {\r\n  const [connected, setConnected] = useState(false);\r\n  const [devices, setDevices] = useState([]);\r\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  const webcamRef = useRef(null); // Referencia a la webcam\r\n\r\n  useEffect(() => {\r\n    // Obtener la lista de dispositivos de entrada disponibles\r\n    navigator.mediaDevices.enumerateDevices().then((devices) => {\r\n      const cameras = devices.filter((device) => device.kind === \"videoinput\");\r\n      setDevices(cameras);\r\n    });\r\n  }, []);\r\n\r\n  const handleConnect = () => {\r\n    // Conectar a la cámara seleccionada\r\n    setConnected(true);\r\n\r\n    // Establecer la conexión WebSocket\r\n    const newSocket = io(\"http://localhost:5000\"); // Cambia la URL a tu backend\r\n    setSocket(newSocket);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      // Escuchar eventos desde el backend\r\n      socket.on(\"connected\", (data) => {\r\n        console.log(\"Connected to server:\", data);\r\n        // Enviar imagen automáticamente al conectarse\r\n        handleSendImage();\r\n      });\r\n\r\n      socket.on(\"prediction\", (prediction) => {\r\n        console.log(\"Prediction received:\", prediction);\r\n        // Aquí puedes mostrar la notificación o realizar otras acciones según la predicción\r\n      });\r\n\r\n      socket.on(\"error\", (error) => {\r\n        console.error(\"Error received:\", error);\r\n      });\r\n    }\r\n  }, [socket]);\r\n\r\n  const handleSendImage = () => {\r\n    console.log(\"Sending image...\");\r\n    if (socket && selectedDevice && webcamRef.current) {\r\n      // Capturar la imagen de la webcam\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n      console.log(\"Image source:\", imageSrc); // Agrega esta línea\r\n\r\n      // Convertir la imagen a formato Blob\r\n      fetch(imageSrc)\r\n        .then((res) => res.blob())\r\n        .then((blob) => {\r\n          // Crear un objeto File a partir del Blob\r\n          const imageFile = new File([blob], \"image.png\", {\r\n            type: \"image/png\",\r\n          });\r\n          console.log(\"Image file:\", imageFile); // Agrega esta línea\r\n\r\n          // Enviar la imagen al backend a través del socket\r\n          socket.emit(\"image\", { image: imageFile });\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      {!connected ? (\r\n        <View>\r\n          <Picker\r\n            selectedValue={selectedDevice}\r\n            onValueChange={(value) => setSelectedDevice(value)}\r\n          >\r\n            <Picker.Item label=\"Seleccionar cámara\" value=\"\" />\r\n            {devices.map((device) => (\r\n              <Picker.Item\r\n                key={device.deviceId}\r\n                label={device.label || `Cámara ${device.deviceId}`}\r\n                value={device.deviceId}\r\n              />\r\n            ))}\r\n          </Picker>\r\n          <Button\r\n            title=\"Conectar a la cámara\"\r\n            onPress={handleConnect}\r\n            disabled={!selectedDevice}\r\n          />\r\n        </View>\r\n      ) : (\r\n        <View>\r\n          <Webcam\r\n            audio={false}\r\n            videoConstraints={{ deviceId: selectedDevice }}\r\n            ref={webcamRef}\r\n          />\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default CameraConnectScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}