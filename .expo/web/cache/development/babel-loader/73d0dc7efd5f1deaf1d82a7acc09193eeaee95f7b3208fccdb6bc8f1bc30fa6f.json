{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FastImage from \"react-native-fast-image\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar CameraConnectScreen = function CameraConnectScreen() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    cameraIp = _useState2[0],\n    setCameraIp = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    connected = _useState4[0],\n    setConnected = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    imageUri = _useState6[0],\n    setImageUri = _useState6[1];\n  useEffect(function () {\n    if (connected) {\n      fetchImage();\n      var timer = setInterval(fetchImage, 1000);\n      return function () {\n        return clearInterval(timer);\n      };\n    }\n  }, [connected]);\n  var fetchImage = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var response = yield axios.get(\"http://\" + cameraIp + \":4747/video\");\n        setImageUri(response.request.responseURL);\n      } catch (error) {\n        console.error(\"Error al obtener la imagen:\", error);\n      }\n    });\n    return function fetchImage() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handleConnect = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var response = yield axios.get(\"http://\" + cameraIp + \":4747\");\n        if (response.status === 200) {\n          setConnected(true);\n        }\n      } catch (error) {\n        console.error(\"Error al conectarse a la cámara:\", error);\n      }\n    });\n    return function handleConnect() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsx(View, {\n    children: !connected ? _jsxs(View, {\n      children: [_jsx(TextInput, {\n        placeholder: \"Ingrese la IP de la c\\xE1mara\",\n        value: cameraIp,\n        onChangeText: setCameraIp\n      }), _jsx(Button, {\n        title: \"Conectar\",\n        onPress: handleConnect\n      })]\n    }) : _jsx(View, {\n      children: _jsx(FastImage, {\n        source: {\n          uri: imageUri\n        },\n        style: {\n          width: 300,\n          height: 200\n        }\n      })\n    })\n  });\n};\nexport default CameraConnectScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Button","FastImage","axios","jsx","_jsx","jsxs","_jsxs","CameraConnectScreen","_useState","_useState2","_slicedToArray","cameraIp","setCameraIp","_useState3","_useState4","connected","setConnected","_useState5","_useState6","imageUri","setImageUri","fetchImage","timer","setInterval","clearInterval","_ref","_asyncToGenerator","response","get","request","responseURL","error","console","apply","arguments","handleConnect","_ref2","status","children","TextInput","placeholder","value","onChangeText","title","onPress","source","uri","style","width","height"],"sources":["C:/Users/Deth1/Desarrollo/mineriaProyectoFront/src/Screens/CameraConnectScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { View, Button } from \"react-native\";\r\nimport FastImage from \"react-native-fast-image\";\r\nimport axios from \"axios\";\r\n\r\nconst CameraConnectScreen = () => {\r\n  const [cameraIp, setCameraIp] = useState(\"\");\r\n  const [connected, setConnected] = useState(false);\r\n  const [imageUri, setImageUri] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (connected) {\r\n      // Realiza una solicitud inicial para obtener la imagen\r\n      fetchImage();\r\n      // Configura un temporizador para realizar solicitudes periódicas\r\n      const timer = setInterval(fetchImage, 1000); // Solicitar cada segundo\r\n      return () => clearInterval(timer); // Limpia el temporizador al desmontar\r\n    }\r\n  }, [connected]);\r\n\r\n  const fetchImage = async () => {\r\n    try {\r\n      const response = await axios.get(`http://${cameraIp}:4747/video`);\r\n      setImageUri(response.request.responseURL); // Actualiza la URL de la imagen\r\n    } catch (error) {\r\n      console.error(\"Error al obtener la imagen:\", error);\r\n    }\r\n  };\r\n\r\n  const handleConnect = async () => {\r\n    try {\r\n      // Realiza una solicitud HTTP para conectarse a la cámara usando su IP\r\n      const response = await axios.get(`http://${cameraIp}:4747`);\r\n      \r\n      // Si la respuesta es exitosa, establece el estado \"connected\" en verdadero\r\n      if (response.status === 200) {\r\n        setConnected(true);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error al conectarse a la cámara:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      {!connected ? (\r\n        <View>\r\n          <TextInput\r\n            placeholder=\"Ingrese la IP de la cámara\"\r\n            value={cameraIp}\r\n            onChangeText={setCameraIp}\r\n          />\r\n          <Button title=\"Conectar\" onPress={handleConnect} />\r\n        </View>\r\n      ) : (\r\n        <View>\r\n          <FastImage\r\n            source={{ uri: imageUri }}\r\n            style={{ width: 300, height: 200 }}\r\n          />\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default CameraConnectScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}